<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Section 12: Onwards to Kubernetes</title>
    <link href="/2022/02/03/section-12-onwards-to-kubernetes/"/>
    <url>/2022/02/03/section-12-onwards-to-kubernetes/</url>
    
    <content type="html"><![CDATA[<p>Before we learn a new tech, we want to find out what is it and why we need it. In order to explain these two questions, please see pictures below:</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-12/image.png"></p><p>When we don’t have Kubernetes, we can use docker-compose to scale our application. But it have a lot of  unnecessary components like nginx, client also be scaled up. Since the calculating unit is only the worker, we can just only scale worker component.</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-12/image_1.png"></p><p>So Kubernetes can divide containers into different Nodes, and there is a Master to control all the Nodes.</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-12/image_2.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Section 6: Creating a Production-Grade Workflow</title>
    <link href="/2022/01/18/section-6-creating-a-production-grade-workflow/"/>
    <url>/2022/01/18/section-6-creating-a-production-grade-workflow/</url>
    
    <content type="html"><![CDATA[<h1 id="Section-6-Creating-a-Production-Grade-Workflow"><a href="#Section-6-Creating-a-Production-Grade-Workflow" class="headerlink" title="Section 6: Creating a Production-Grade Workflow"></a>Section 6: Creating a Production-Grade Workflow</h1><h2 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h2><p>Our workflow is like this:</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-6/%E6%88%AA%E5%B1%8F2022-01-10%2020.56.45.png"></p><p>So we are goning to go through this whole workflow.</p><h3 id="Create-a-React-demo-Application"><a href="#Create-a-React-demo-Application" class="headerlink" title="Create a React demo Application"></a>Create a React demo Application</h3><p>First, We need to create a react project, and we need install  <em>NodeJS</em> and <em>npm</em> to create a react app.</p><p>After NodeJS and npm installed, we can run:</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><pre><code class="hljs Bash">➜  Project npx create-react-app front<br><br>Creating a new React app <span class="hljs-keyword">in</span> /Users/kun/Project/front.<br><br>Installing packages. This might take a couple of minutes.<br>Installing react, react-dom, and react-scripts with cra-template...<br><br><br>added 1358 packages <span class="hljs-keyword">in</span> 28s<br><br>166 packages are looking <span class="hljs-keyword">for</span> funding<br>  run `npm fund` <span class="hljs-keyword">for</span> details<br><br>Initialized a git repository.<br><br>Installing template dependencies using npm...<br><br>added 33 packages <span class="hljs-keyword">in</span> 3s<br><br>166 packages are looking <span class="hljs-keyword">for</span> funding<br>  run `npm fund` <span class="hljs-keyword">for</span> details<br>Removing template package using npm...<br><br><br>removed 1 package, and audited 1391 packages <span class="hljs-keyword">in</span> 2s<br><br>166 packages are looking <span class="hljs-keyword">for</span> funding<br>  run `npm fund` <span class="hljs-keyword">for</span> details<br><br>8 moderate severity vulnerabilities<br><br>To address all issues (including breaking changes), run:<br>  npm audit fix --force<br><br>Run `npm audit` <span class="hljs-keyword">for</span> details.<br><br>Created git commit.<br><br>Success! Created front at /Users/kun/Project/front<br>Inside that directory, you can run several commands:<br><br>  npm start<br>    Starts the development server.<br><br>  npm run build<br>    Bundles the app into static files <span class="hljs-keyword">for</span> production.<br><br>  npm <span class="hljs-built_in">test</span><br>    Starts the <span class="hljs-built_in">test</span> runner.<br><br>  npm run eject<br>    Removes this tool and copies build dependencies, configuration files<br>    and scripts into the app directory. If you <span class="hljs-keyword">do</span> this, you can’t go back!<br><br>We suggest that you begin by typing:<br><br>  <span class="hljs-built_in">cd</span> front<br>  npm start<br><br>Happy hacking!<br><br></code></pre></td></tr></table></figure><p>As we can see: </p><ol><li><em>npm start</em> is used for development to run this app</li><li><em>npm test</em> is used for testing </li><li><em>npm run build</em> is used for deployment. If we run this command it will generate the native .js and .html files which used to deployment.</li></ol><p><img src="https://kunren1010.github.io/post-images/docker-images/section-6/%E6%88%AA%E5%B1%8F2022-01-11%2010.08.52.png"></p><h3 id="Run-the-Workflow-on-local-machine"><a href="#Run-the-Workflow-on-local-machine" class="headerlink" title="Run the Workflow on local machine"></a>Run the Workflow on local machine</h3><h4 id="Development"><a href="#Development" class="headerlink" title="Development"></a>Development</h4><p>So what we need to do fristly is creating a Dockerfile to provide a container that can be used in <em>Travis CI</em>.</p><blockquote><p>Dockerfile</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-string">FROM</span> <span class="hljs-string">node:16-alpine</span><br><br><span class="hljs-string">WORKDIR</span> <span class="hljs-string">&#x27;/app&#x27;</span><br><br><span class="hljs-string">COPY</span> <span class="hljs-string">package.json</span> <span class="hljs-string">.</span><br><span class="hljs-string">RUN</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br><br><span class="hljs-string">COPY</span> <span class="hljs-string">.</span> <span class="hljs-string">.</span><br><br><span class="hljs-string">CMD</span> [<span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;run&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>]<br></code></pre></td></tr></table></figure><p>If we run this container locally and expose our port, we can get a demo page of react.</p><p>Next, Let’s create docker-compose.yml to use and manage this container:</p><p>So first we want to create a container to run this react app:</p><blockquote><p>docker-compose.yml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">development-container:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">ports:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;3000:3000&#x27;</span><br><br></code></pre></td></tr></table></figure><p>Use <em>docker-compose up</em> command, we successfully run this container. And if we want to bind our local files with the container directory, we can do this:</p><blockquote><p>docker-compose.yml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">development-container:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">ports:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;3000:3000&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">/app/node_modules</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">.:/app</span><br></code></pre></td></tr></table></figure><p>Yes, that is for development. But how to test our application?</p><h4 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h4><p>As I mentioned, use <em>npm run test</em> in the container, so we need another container to run the tests.</p><blockquote><p>docker-compose.yml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">development-container:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">ports:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;3000:3000&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">/app/node_modules</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">.:/app</span><br>  <span class="hljs-attr">test-container:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">volumes:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">/app/node_modules</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">.:/app</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;run&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>]<br></code></pre></td></tr></table></figure><p>Yeah, basically, we just create another container and override the default command in Dockerfile. So what’s next?</p><h4 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h4><p>So how to deploy our application? First, we run <em>npm run build</em>, and we will get a build directory where there are some .js and .html files. So what we need is a HTTP server that can proxy and expose those files. So we use <em>Nginx</em> which is the most popular proxy over the world.</p><p>So how to add <em>Nginx</em> into our project? Here is our solution:</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-6/%E6%88%AA%E5%B1%8F2022-01-11%2020.17.12.png"></p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-6/image.png"></p><p>For this purpose, we need motify our D<em>ockerfile</em>. </p><blockquote><p>Dockerfile</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-string">FROM</span> <span class="hljs-string">node:16-alpine</span> <span class="hljs-string">as</span> <span class="hljs-string">builder</span><br><span class="hljs-string">WORKDIR</span> <span class="hljs-string">&#x27;/app&#x27;</span><br><span class="hljs-string">COPY</span> <span class="hljs-string">package.json</span> <span class="hljs-string">.</span><br><span class="hljs-string">RUN</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br><span class="hljs-string">COPY</span> <span class="hljs-string">.</span> <span class="hljs-string">.</span><br><span class="hljs-string">RUN</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span><br><br><span class="hljs-string">FROM</span> <span class="hljs-string">nginx</span><br><span class="hljs-string">COPY</span> <span class="hljs-string">--from=builder</span> <span class="hljs-string">/app/build</span> <span class="hljs-string">usr/share/nginx/html</span><br></code></pre></td></tr></table></figure><p>Yes, we need run the <em>npm run build</em> command in the first stage, and then copy the *build *directory into <em>nginx</em> image.</p><p>When we run <em>docker build .</em> and <em>docker run -p 3000:80 b83586647e24</em>. 80 port is the default port of nginx.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Section 7: CI/CD</title>
    <link href="/2022/01/18/section-7-cicd/"/>
    <url>/2022/01/18/section-7-cicd/</url>
    
    <content type="html"><![CDATA[<h1 id="Section-7-CI-x2F-CD"><a href="#Section-7-CI-x2F-CD" class="headerlink" title="Section 7: CI&#x2F;CD"></a>Section 7: CI&#x2F;CD</h1><p><img src="https://kunren1010.github.io/post-images/docker-images/section-7/%E6%88%AA%E5%B1%8F2022-01-11%2009.07.48.png"></p><p>In reality, The whole workflow is more like this. First push our code to <em>Github</em> and merge code into <em>master branch</em>. Then <em>Travis CI</em> fetch all files from <em>Github</em>. After running , testing and building (run <em>npm start</em>, *npm test *and <em>npm run build</em>), Travis CI will deploy the built code into <em>AWS Hosting</em>.</p><p>So the first step is to create a github repo. And config our Travis CI.</p><p>Next, we need to tell Travis to build our image, run our test and delopy our build files to AWS.</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-7/%E6%88%AA%E5%B1%8F2022-01-12%2019.58.18.png"></p><p>Here is a config that can make Travis know what it should do. that is .travis.yml</p><blockquote><p>.travis.yml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">sudo:</span> <span class="hljs-string">required</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span><br><br><span class="hljs-attr">before_install:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">build</span> <span class="hljs-string">-t</span> <span class="hljs-string">docker-react</span> <span class="hljs-string">-f</span> <span class="hljs-string">Dockerfile.dev</span> <span class="hljs-string">.</span><br><br><span class="hljs-attr">script:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">run</span> <span class="hljs-string">docker-react</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">test</span> <span class="hljs-string">--</span> <span class="hljs-string">--coverage</span><br><br></code></pre></td></tr></table></figure><p>Yes, it works fine! and we can see some logs in Travis CI website.</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-7/%E6%88%AA%E5%B1%8F2022-01-12%2020.14.53.png"></p><p>But for AWS delopment, unfornately I have no free account to do this. So I can just put the .travis.yml file here. It just uses the API of AWS. The whole process is just the same as run test.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Section 8-9: Building and Dockerizeing a Multi-Container Application</title>
    <link href="/2022/01/18/section-8-9-building-and-dockerizeing-a-multi-container-application/"/>
    <url>/2022/01/18/section-8-9-building-and-dockerizeing-a-multi-container-application/</url>
    
    <content type="html"><![CDATA[<h1 id="Section-8-9-Building-and-Dockerizeing-a-Multi-Container-Application"><a href="#Section-8-9-Building-and-Dockerizeing-a-Multi-Container-Application" class="headerlink" title="Section 8-9: Building and Dockerizeing a Multi-Container Application"></a>Section 8-9: Building and Dockerizeing a Multi-Container Application</h1><p>In the last section, we have built the whole workflow for a simple React application. But it is so simple and we didn’t learn much knowledge how to combine different parts of a system. </p><p>So in this section we will construct a system, like this:</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-8-9/image.png"></p><p>In the real development, we need dev dockerfile that is a little different from the dockerfile in production.</p><p>You can download the whole system codes Here.</p><p><a href="static/131-checkpoint.zip">131-checkpoint.zip</a></p><h3 id="Build-container-for-each-component"><a href="#Build-container-for-each-component" class="headerlink" title="Build container for each component."></a>Build container for each component.</h3><p>First, for the <strong>client</strong>:</p><blockquote><p>Dockerfile.dev</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-string">FROM</span> <span class="hljs-string">node:alpine</span><br><span class="hljs-string">WORKDIR</span> <span class="hljs-string">/usr/app</span><br><span class="hljs-string">COPY</span> <span class="hljs-string">./package.json</span> <span class="hljs-string">.</span><br><span class="hljs-string">RUN</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br><span class="hljs-string">COPY</span> <span class="hljs-string">.</span> <span class="hljs-string">.</span><br><span class="hljs-string">CMD</span> [<span class="hljs-string">&quot;npm&quot;</span>,<span class="hljs-string">&quot;start&quot;</span>]<br></code></pre></td></tr></table></figure><p>Second, for the <strong>server</strong>:</p><p>Dockerfile.dev</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-string">FROM</span> <span class="hljs-string">node:alpine</span><br><span class="hljs-string">WORKDIR</span> <span class="hljs-string">/usr/app</span><br><span class="hljs-string">COPY</span> <span class="hljs-string">./package.json</span> <span class="hljs-string">.</span><br><span class="hljs-string">RUN</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br><span class="hljs-string">COPY</span> <span class="hljs-string">.</span> <span class="hljs-string">.</span><br><span class="hljs-string">CMD</span> [<span class="hljs-string">&quot;npm&quot;</span>,<span class="hljs-string">&quot;run&quot;</span>,<span class="hljs-string">&quot;dev&quot;</span>]<br></code></pre></td></tr></table></figure><p>Third, for the worker:</p><p>Dockerfile.dev</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-string">FROM</span> <span class="hljs-string">node:alpine</span><br><span class="hljs-string">WORKDIR</span> <span class="hljs-string">/usr/app</span><br><span class="hljs-string">COPY</span> <span class="hljs-string">./package.json</span> <span class="hljs-string">.</span><br><span class="hljs-string">RUN</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br><span class="hljs-string">COPY</span> <span class="hljs-string">.</span> <span class="hljs-string">.</span><br><span class="hljs-string">CMD</span> [<span class="hljs-string">&quot;npm&quot;</span>,<span class="hljs-string">&quot;run&quot;</span>,<span class="hljs-string">&quot;dev&quot;</span>]<br></code></pre></td></tr></table></figure><h3 id="Write-a-docker-compose-config-file"><a href="#Write-a-docker-compose-config-file" class="headerlink" title="Write a docker-compose config file"></a>Write a docker-compose config file</h3><p>After finishing to build all the containers for each components. What is the next is that use docker-compose to combine them together.Here is our reqiurements:</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-8-9/image_1.png"></p><blockquote><p>docker-compose.yml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">postgres:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>  <span class="hljs-attr">server:</span><br>    <span class="hljs-attr">build:</span><br>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile.dev</span><br>      <span class="hljs-attr">context:</span> <span class="hljs-string">./server</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/app/node_modules</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./server:/app</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REDIS_HOST=redis</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REDIS_PORT=6379</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGUSER=postgres</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGDATABASE=postgres</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGPASSWORD=postgres_password</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGPORT=5432</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">stdin_open:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">build:</span><br>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile.dev</span><br>      <span class="hljs-attr">context:</span> <span class="hljs-string">./client</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/app/node_modules</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./client:/app</span><br>  <span class="hljs-attr">worker:</span><br>    <span class="hljs-attr">build:</span><br>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile.dev</span><br>      <span class="hljs-attr">context:</span> <span class="hljs-string">./woker</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/app/node_modules</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./woker:/app</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REDIS_HOST=redis</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REDIS_PORT=6379</span><br></code></pre></td></tr></table></figure><p>That is it, if you are curios about <em>environment</em> in the config. please see this picture:</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-8-9/image_2.png"></p><p>Yes, we can add our environment variables through these two ways.</p><p>But what’s next? </p><p>we need a http server like Nginx to serve our client.</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-8-9/image_3.png"></p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-8-9/image_4.png"></p><blockquote><p>default.conf</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-string">upstream</span> <span class="hljs-string">client</span> &#123;<br>  <span class="hljs-string">server</span> <span class="hljs-string">client:3000;</span><br>&#125;<br><br><span class="hljs-string">upstream</span> <span class="hljs-string">api</span> &#123;<br>  <span class="hljs-string">server</span> <span class="hljs-string">api:5000;</span><br>&#125;<br><br><span class="hljs-string">server</span> &#123;<br>  <span class="hljs-string">listen</span> <span class="hljs-number">80</span><span class="hljs-string">;</span><br><br>  <span class="hljs-string">location</span> <span class="hljs-string">/</span> &#123;<br>    <span class="hljs-string">proxy_pass</span> <span class="hljs-string">http://client;</span><br>  &#125;<br><br>  <span class="hljs-string">location</span> <span class="hljs-string">/api</span> &#123;<br>    <span class="hljs-string">rewrite</span> <span class="hljs-string">/api/(.*)</span> <span class="hljs-string">/$1</span> <span class="hljs-string">break;</span><br>    <span class="hljs-string">proxy_pass</span> <span class="hljs-string">http://api;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>and nginx dockerfile:</p><blockquote><p>Dockerfile.dev</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-string">FROM</span> <span class="hljs-string">nginx</span><br><span class="hljs-string">COPY</span> <span class="hljs-string">./default.conf</span> <span class="hljs-string">/etc/nginx/conf.d/default.conf</span><br><br></code></pre></td></tr></table></figure><blockquote><p>docker-compose.yml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">postgres:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;postgres:latest&#x27;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">POSTGRES_PASSWORD=postgres_password</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;redis:latest&#x27;</span><br>  <span class="hljs-attr">nginx:</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">api</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">client</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">build:</span><br>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile.dev</span><br>      <span class="hljs-attr">context:</span> <span class="hljs-string">./nginx</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;3050:80&#x27;</span><br>  <span class="hljs-attr">api:</span><br>    <span class="hljs-attr">build:</span><br>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile.dev</span><br>      <span class="hljs-attr">context:</span> <span class="hljs-string">./server</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/app/node_modules</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./server:/app</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REDIS_HOST=redis</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REDIS_PORT=6379</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGUSER=postgres</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGHOST=postgres</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGDATABASE=postgres</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGPASSWORD=postgres_password</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGPORT=5432</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">stdin_open:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">build:</span><br>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile.dev</span><br>      <span class="hljs-attr">context:</span> <span class="hljs-string">./client</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/app/node_modules</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./client:/app</span><br>  <span class="hljs-attr">worker:</span><br>    <span class="hljs-attr">build:</span><br>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile.dev</span><br>      <span class="hljs-attr">context:</span> <span class="hljs-string">./worker</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/app/node_modules</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./worker:/app</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REDIS_HOST=redis</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REDIS_PORT=6379</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Section 5: Docker Compose with Multiple Local Containers</title>
    <link href="/2022/01/18/section-5-docker-compose-with-multiple-local-containers/"/>
    <url>/2022/01/18/section-5-docker-compose-with-multiple-local-containers/</url>
    
    <content type="html"><![CDATA[<h1 id="Section-5-Docker-Compose-with-Multiple-Local-Containers"><a href="#Section-5-Docker-Compose-with-Multiple-Local-Containers" class="headerlink" title="Section 5: Docker Compose with Multiple Local Containers"></a>Section 5: Docker Compose with Multiple Local Containers</h1><h2 id="Small-NodeJS-application"><a href="#Small-NodeJS-application" class="headerlink" title="Small NodeJS application"></a>Small NodeJS application</h2><p>In this section, we are going to create a local application like below:</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-5/%E6%88%AA%E5%B1%8F2022-01-10%2010.02.40.png"></p><p>Here is the code:</p><blockquote><p>package.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;express&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;redis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.8.0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node index.js&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>index.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;redis&#x27;</span>);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-keyword">const</span> client = redis.<span class="hljs-title function_">createClient</span>(<span class="hljs-number">6379</span>,<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>);<br>client.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;visits&#x27;</span>, <span class="hljs-number">0</span>);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  client.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;visits&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, visits</span>) =&gt;</span> &#123;a<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Number of visits is &#x27;</span> + visits);<br>    client.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;visits&#x27;</span>, <span class="hljs-built_in">parseInt</span>(visits) + <span class="hljs-number">1</span>);<br>  &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8081</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Listening on port 8081&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>So. baesed on this application we can write a Dockerfile:</p><blockquote><p>Dockerfile</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-string">FROM</span> <span class="hljs-string">node:alpine</span><br><span class="hljs-string">WORKDIR</span> <span class="hljs-string">/usr/app</span><br><span class="hljs-string">COPY</span> <span class="hljs-string">./package.json</span> <span class="hljs-string">.</span><br><span class="hljs-string">RUN</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br><span class="hljs-string">COPY</span> <span class="hljs-string">.</span> <span class="hljs-string">.</span><br><span class="hljs-string">CMD</span> [<span class="hljs-string">&quot;npm&quot;</span>,<span class="hljs-string">&quot;start&quot;</span>]<br></code></pre></td></tr></table></figure><p>But when we run the image. It seems that the application cannot find redis server.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Bash">➜  ~ docker run -p 8081:8081 eb66478b6b21<br><br>&gt; start<br>&gt; node index.js<br><br>Listening on port 8081<br>node:events:368<br>      throw er; // Unhandled <span class="hljs-string">&#x27;error&#x27;</span> event<br>      ^<br><br>Error: connect ECONNREFUSED 127.0.0.1:6379<br>    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1157:16)<br>Emitted <span class="hljs-string">&#x27;error&#x27;</span> event on RedisClient instance at:<br>    at RedisClient.on_error (/usr/app/node_modules/redis/index.js:406:14)<br>    at Socket.&lt;anonymous&gt; (/usr/app/node_modules/redis/index.js:279:14)<br>    at Socket.emit (node:events:390:28)<br>    at emitErrorNT (node:internal/streams/destroy:164:8)<br>    at emitErrorCloseNT (node:internal/streams/destroy:129:3)<br>    at processTicksAndRejections (node:internal/process/task_queues:83:21) &#123;<br>  errno: -111,<br>  code: <span class="hljs-string">&#x27;ECONNREFUSED&#x27;</span>,<br>  syscall: <span class="hljs-string">&#x27;connect&#x27;</span>,<br>  address: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>  port: 6379<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="How-to-get-a-running-redis-server"><a href="#How-to-get-a-running-redis-server" class="headerlink" title="How to get a running redis server"></a>How to get a running redis server</h2><p>We have two ways to get a connected redis server for the application.</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-5/%E6%88%AA%E5%B1%8F2022-01-10%2010.23.44.png"></p><p>For the first method, you can find the solution in this blog:</p><p><a href="https://medium.com/geekculture/using-redis-with-docker-and-nodejs-express-71dccd495fd3">https://medium.com/geekculture/using-redis-with-docker-and-nodejs-express-71dccd495fd3</a></p><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>For the second, We need to use Docker Compose. So what is Docker Compose?</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-5/%E6%88%AA%E5%B1%8F2022-01-10%2010.26.39.png"></p><p>We can easily think that Docker Compose is just a tool to manage multiple Docker containers.</p><p>So how to  create a docker-compose.yml and how to use it?</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-5/%E6%88%AA%E5%B1%8F2022-01-10%2010.14.16.png"></p><p>Here is a process that we want docker compose to do for us. Based on this process we can write a docker compose file, like:</p><blockquote><p>docker-compose.yml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis-server:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;redis&#x27;</span><br>  <span class="hljs-attr">node-app:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;8081:8081&#x27;</span><br><br></code></pre></td></tr></table></figure><p> In this way, docker compose will help us create two separate containers. But how <em>node-app</em> get connected to <em>redis</em>? </p><h3 id="Docker-Compose-Network"><a href="#Docker-Compose-Network" class="headerlink" title="Docker Compose Network"></a>Docker Compose Network</h3><p>To do this, we need change our node-app code where redis client want to connect redis. </p><blockquote><p>index.js</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-string">const</span> <span class="hljs-string">express</span> <span class="hljs-string">=</span> <span class="hljs-string">require(&#x27;express&#x27;);</span><br><span class="hljs-string">const</span> <span class="hljs-string">redis</span> <span class="hljs-string">=</span> <span class="hljs-string">require(&#x27;redis&#x27;);</span><br><br><span class="hljs-string">const</span> <span class="hljs-string">app</span> <span class="hljs-string">=</span> <span class="hljs-string">express();</span><br><span class="hljs-string">const</span> <span class="hljs-string">client</span> <span class="hljs-string">=</span> <span class="hljs-string">redis.createClient(&#123;</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">&#x27;redis-server&#x27;</span><span class="hljs-string">,</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><span class="hljs-string">,</span><br><span class="hljs-string">&#125;);</span><br><span class="hljs-string">client.set(&#x27;visits&#x27;,</span> <span class="hljs-number">0</span><span class="hljs-string">);</span><br><br><span class="hljs-string">app.get(&#x27;/&#x27;,</span> <span class="hljs-string">(req,</span> <span class="hljs-string">res)</span> <span class="hljs-string">=&gt;</span> &#123;<br>  <span class="hljs-string">client.get(&#x27;visits&#x27;</span>, <span class="hljs-string">(err</span>, <span class="hljs-string">visits)</span> <span class="hljs-string">=&gt;</span> &#123;<br>    <span class="hljs-string">res.send(&#x27;Number</span> <span class="hljs-string">of</span> <span class="hljs-string">visits</span> <span class="hljs-string">&#x27; + visits);</span><br><span class="hljs-string">    client.set(&#x27;</span><span class="hljs-string">visits&#x27;</span>, <span class="hljs-string">parseInt(visits)</span> <span class="hljs-string">+</span> <span class="hljs-number">1</span><span class="hljs-string">);</span><br>  &#125;<span class="hljs-string">);</span><br>&#125;<span class="hljs-string">);</span><br><br><span class="hljs-string">app.listen(8081,</span> <span class="hljs-string">()</span> <span class="hljs-string">=&gt;</span> &#123;<br>  <span class="hljs-string">console.log(&#x27;listening</span> <span class="hljs-string">on</span> <span class="hljs-string">port</span> <span class="hljs-number">8081</span><span class="hljs-string">&#x27;);</span><br><span class="hljs-string">&#125;);</span><br></code></pre></td></tr></table></figure><p><strong>redis-server</strong> is from <em>docker-compose.yml</em> (line 3). This is the hostname of the redis container. What is hostname? The same as <em>localhost</em> is our local machine  hostname. Which refer to<em>127.0.0.1</em> or any other local IP address.</p><p>Docker Compose commands</p><h4 id="1-docker-compose-up"><a href="#1-docker-compose-up" class="headerlink" title="1. docker-compose up"></a>1. docker-compose up</h4><p>Which is used to run images through <em>docker-compose.yml</em></p><h4 id="2-docker-compose-up-—build"><a href="#2-docker-compose-up-—build" class="headerlink" title="2. docker-compose up —build"></a>2. docker-compose up —build</h4><p>—build flag means that rebuild all the containers.</p><h4 id="3-docker-compose-down"><a href="#3-docker-compose-down" class="headerlink" title="3.  docker-compose down"></a>3.  docker-compose down</h4><p>Used to shut down all the containers.</p><h4 id="4-docker-compose-ps"><a href="#4-docker-compose-ps" class="headerlink" title="4. docker-compose ps"></a>4. docker-compose ps</h4><p>Used to show the containers belong to this <em>docker-compose.yml</em></p>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Section 4: Making Real Projects with Docker</title>
    <link href="/2022/01/18/section-4-making-real-projects-with-docker/"/>
    <url>/2022/01/18/section-4-making-real-projects-with-docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Section-4-Making-Real-Projects-with-Docker"><a href="#Section-4-Making-Real-Projects-with-Docker" class="headerlink" title="Section 4: Making Real Projects with Docker"></a>Section 4: Making Real Projects with Docker</h1><h2 id="First-We-create-a-NodeJS-demo-project-like-this"><a href="#First-We-create-a-NodeJS-demo-project-like-this" class="headerlink" title="First, We create a NodeJS demo project, like this:"></a>First, We create a NodeJS demo project, like this:</h2><blockquote><p>package.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;express&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node index.js&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><blockquote><p>index.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hi there&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Listening on port 8080&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>This is a simple project. And we can run this NodeJS project locally by using <em>npm install</em> and <em>npm run</em>.</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-4/image.png"></p><p>So if we want to edit a Dockerfile to use docker to run this project. We can do some similar things when we create an image for redis.</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-4/image_1.png"></p><p>But when we run Dockerfile like this:</p><blockquote><p>Dockerfile</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-string">FROM</span> <span class="hljs-string">alpine</span><br><span class="hljs-string">RUN</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br><span class="hljs-string">CMD</span> [<span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Bash">➜  simpleweb 2 docker build .<br>[+] Building 1.9s (6/6) FINISHED                                                <br> =&gt; [internal] load build definition from Dockerfile                       0.0s<br> =&gt; =&gt; transferring dockerfile: 91B                                        0.0s<br> =&gt; [internal] load .dockerignore                                          0.0s<br> =&gt; =&gt; transferring context: 2B                                            0.0s<br> =&gt; [internal] load metadata <span class="hljs-keyword">for</span> docker.io/library/alpine:latest           1.6s<br> =&gt; [auth] library/alpine:pull token <span class="hljs-keyword">for</span> registry-1.docker.io              0.0s<br> =&gt; CACHED [1/2] FROM docker.io/library/alpine@sha256:21a3deaa0d32a805791  0.0s<br> =&gt; ERROR [2/2] RUN npm install                                            0.2s<br>------<br> &gt; [2/2] RUN npm install:<br><span class="hljs-comment">#6 0.191 /bin/sh: npm: not found</span><br>------<br>executor failed running [/bin/sh -c npm install]: <span class="hljs-built_in">exit</span> code: 127<br></code></pre></td></tr></table></figure><p>There is an error “ npm not found”. Why? Actually the reason is that the base image alpine does not contain <em>npm package manager</em>. So we need to change our base image to an image which contain <em>npm</em>, for example: <em>node:alpine</em></p><blockquote><p>Dockerfile</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-string">FROM</span> <span class="hljs-string">node:alpine</span><br><span class="hljs-string">RUN</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br><span class="hljs-string">CMD</span> [<span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>]<br></code></pre></td></tr></table></figure><p>But there is a new error:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Bash">➜  simpleweb 2 docker build .<br>[+] Building 3.1s (6/6) FINISHED                                                <br> =&gt; [internal] load build definition from Dockerfile                       0.0s<br> =&gt; =&gt; transferring dockerfile: 96B                                        0.0s<br> =&gt; [internal] load .dockerignore                                          0.0s<br> =&gt; =&gt; transferring context: 2B                                            0.0s<br> =&gt; [internal] load metadata <span class="hljs-keyword">for</span> docker.io/library/node:alpine             1.4s<br> =&gt; [auth] library/node:pull token <span class="hljs-keyword">for</span> registry-1.docker.io                0.0s<br> =&gt; CACHED [1/2] FROM docker.io/library/node:alpine@sha256:4dd690ef859cea  0.0s<br> =&gt; ERROR [2/2] RUN npm install                                            1.6s<br>------                                                                          <br> &gt; [2/2] RUN npm install:<br><span class="hljs-comment">#6 1.553 npm ERR! Tracker &quot;idealTree&quot; already exists</span><br><span class="hljs-comment">#6 1.556 </span><br><span class="hljs-comment">#6 1.556 npm ERR! A complete log of this run can be found in:</span><br><span class="hljs-comment">#6 1.556 npm ERR!     /root/.npm/_logs/2022-01-09T19_18_59_392Z-debug-0.log</span><br>------<br>executor failed running [/bin/sh -c npm install]: <span class="hljs-built_in">exit</span> code: 1<br></code></pre></td></tr></table></figure><p>It said that “failed running”, when we searched this error in google, we found that npm didn’t find package.json file in the image work directory. So how to fix it? yes, just copy our local files into image before we run <em>npm install</em>. And we would also *specific a work directory *for this application. Otherwise, this error will occur.</p><blockquote><p>Dockerfile</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-string">FROM</span> <span class="hljs-string">node:alpine</span><br><span class="hljs-string">WORKDIR</span> <span class="hljs-string">/app</span><br><span class="hljs-string">COPY</span> <span class="hljs-string">.</span> <span class="hljs-string">.</span><br><span class="hljs-string">RUN</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br><span class="hljs-string">CMD</span> [<span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>]<br><br></code></pre></td></tr></table></figure><p>Yes, now, It work!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Bash">➜  simpleweb 2 docker build .<br>[+] Building 4.2s (9/9) FINISHED                                                <br> =&gt; [internal] load build definition from Dockerfile                       0.0s<br> =&gt; =&gt; transferring dockerfile: 118B                                       0.0s<br> =&gt; [internal] load .dockerignore                                          0.0s<br> =&gt; =&gt; transferring context: 2B                                            0.0s<br> =&gt; [internal] load metadata <span class="hljs-keyword">for</span> docker.io/library/node:alpine             0.6s<br> =&gt; [internal] load build context                                          0.0s<br> =&gt; =&gt; transferring context: 434B                                          0.0s<br> =&gt; [1/4] FROM docker.io/library/node:alpine@sha256:4dd690ef859ceadc242e9  0.0s<br> =&gt; CACHED [2/4] WORKDIR /app                                              0.0s<br> =&gt; [3/4] COPY . .                                                         0.0s<br> =&gt; [4/4] RUN npm install                                                  3.3s<br> =&gt; exporting to image                                                     0.2s<br> =&gt; =&gt; exporting layers                                                    0.2s<br> =&gt; =&gt; writing image sha256:ea974380f73c49623b7e2b65507a404640befae7b6372  0.0s <br></code></pre></td></tr></table></figure><h2 id="Next-run-this-image-and-open-a-port"><a href="#Next-run-this-image-and-open-a-port" class="headerlink" title="Next, run this image and open a port"></a>Next, run this image and open a port</h2><p><img src="https://kunren1010.github.io/post-images/docker-images/section-4/image_2.png"></p><p>By default, we cannot get access to docker container. So we need open a port for the application when we run this image.</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-4/image_3.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># docker run -p &lt;Local Port&gt; : &lt;Container Port&gt; &lt;image id&gt;</span><br>➜  simpleweb 2 docker run -p 3000:8080 ea974380f73c<br><br>&gt; start<br>&gt; node index.js<br><br>Listening on port 8080<br><br></code></pre></td></tr></table></figure><p><img src="https://kunren1010.github.io/post-images/docker-images/section-4/%E6%88%AA%E5%B1%8F2022-01-09%2021.35.50.png"></p><p>Now, it works good so far.</p><h2 id="Minimizing-Cache-Busting-and-Rebuilds"><a href="#Minimizing-Cache-Busting-and-Rebuilds" class="headerlink" title="Minimizing Cache Busting and Rebuilds"></a>Minimizing Cache Busting and Rebuilds</h2><p>When we make any change on our application. We need to rebuild our Dockerfile. But here is a problem. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Bash">➜  simpleweb 2 docker build .<br>[+] Building 1.7s (10/10) FINISHED                                              <br> =&gt; [internal] load build definition from Dockerfile                       0.0s<br> =&gt; =&gt; transferring dockerfile: 36B                                        0.0s<br> =&gt; [internal] load .dockerignore                                          0.0s<br> =&gt; =&gt; transferring context: 2B                                            0.0s<br> =&gt; [internal] load metadata <span class="hljs-keyword">for</span> docker.io/library/node:alpine             1.6s<br> =&gt; [auth] library/node:pull token <span class="hljs-keyword">for</span> registry-1.docker.io                0.0s<br> =&gt; [internal] load build context                                          0.0s<br> =&gt; =&gt; transferring context: 352B                                          0.0s<br>** =&gt; [1/4] FROM docker.io/library/node:alpine@sha256:4dd690ef859ceadc242e9  0.0s<br> =&gt; CACHED [2/4] WORKDIR /app                                              0.0s<br> =&gt; CACHED [3/4] COPY . .                                                  0.0s<br> =&gt; CACHED [4/4] RUN npm install                                           0.0s**<br> =&gt; exporting to image                                                     0.0s<br> =&gt; =&gt; exporting layers                                                    0.0s<br> =&gt; =&gt; writing image sha256:ea974380f73c49623b7e2b65507a404640befae7b6372  0.0s<br></code></pre></td></tr></table></figure><p>We can see that if we do not change the Dockerfile, docker will rebuild the image from cache. But if we change the application code. what will happen?\</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Bash">➜  simpleweb 2 vim index.js <br>➜  simpleweb 2 docker build .<br>[+] Building 4.1s (9/9) FINISHED                                                 <br> =&gt; [internal] load build definition from Dockerfile                        0.0s<br> =&gt; =&gt; transferring dockerfile: 36B                                         0.0s<br> =&gt; [internal] load .dockerignore                                           0.0s<br> =&gt; =&gt; transferring context: 2B                                             0.0s<br> =&gt; [internal] load metadata <span class="hljs-keyword">for</span> docker.io/library/node:alpine              0.6s<br> =&gt; [1/4] FROM docker.io/library/node:alpine@sha256:4dd690ef859ceadc242e99  0.0s<br> =&gt; [internal] load build context                                           0.0s<br> =&gt; =&gt; transferring context: 556B                                           0.0s<br> =&gt; CACHED [2/4] WORKDIR /app                                               0.0s<br> =&gt; [3/4] COPY . .                                                          0.0s<br> =&gt; [4/4] RUN npm install                                                   3.3s<br> =&gt; exporting to image                                                      0.2s<br> =&gt; =&gt; exporting layers                                                     0.2s<br> =&gt; =&gt; writing image sha256:d5358f17ecaef0757294a7569d212ba28d0c90dc474f66  0.0s<br><br></code></pre></td></tr></table></figure><p>We can find that <strong>docker rebuild from the line we modified</strong>, but that makes sense, because the FileSystem snapshot from the that line has changed. We do not have a cache from that modified line.</p><p>So how can we optimize our Dockerfile to make <em>npm install</em> not run again and again? But to use the cache?</p><blockquote><p>Dockerfile</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-string">FROM</span> <span class="hljs-string">node:alpine</span><br><span class="hljs-string">WORKDIR</span> <span class="hljs-string">/usr/app</span><br><span class="hljs-string">COPY</span> <span class="hljs-string">./package.json</span> <span class="hljs-string">.</span><br><span class="hljs-string">RUN</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br><span class="hljs-string">COPY</span> <span class="hljs-string">.</span> <span class="hljs-string">.</span><br><span class="hljs-string">CMD</span> [<span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Bash">➜  simpleweb 2 vim index.js <br>➜  simpleweb 2 docker build .<br>[+] Building 0.7s (10/10) FINISHED                                              <br> =&gt; [internal] load build definition from Dockerfile                       0.0s<br> =&gt; =&gt; transferring dockerfile: 36B                                        0.0s<br> =&gt; [internal] load .dockerignore                                          0.0s<br> =&gt; =&gt; transferring context: 2B                                            0.0s<br> =&gt; [internal] load metadata <span class="hljs-keyword">for</span> docker.io/library/node:alpine             0.6s<br> =&gt; [1/5] FROM docker.io/library/node:alpine@sha256:4dd690ef859ceadc242e9  0.0s<br> =&gt; [internal] load build context                                          0.0s<br> =&gt; =&gt; transferring context: 553B                                          0.0s<br> =&gt; CACHED [2/5] WORKDIR /usr/app                                          0.0s<br> =&gt; CACHED [3/5] COPY ./package.json .                                     0.0s<br> =&gt; CACHED [4/5] RUN npm install                                           0.0s<br> =&gt; [5/5] COPY . .                                                         0.0s<br> =&gt; exporting to image                                                     0.0s<br> =&gt; =&gt; exporting layers                                                    0.0s<br> =&gt; =&gt; writing image sha256:2b65a064f4ee33dc9ebbb786647c860a3ce2b4a41f266  0.0s<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Section 3: Building Custom Images Through Docker Server</title>
    <link href="/2022/01/17/section-3-building-custom-images-through-docker-server/"/>
    <url>/2022/01/17/section-3-building-custom-images-through-docker-server/</url>
    
    <content type="html"><![CDATA[<h1 id="Section-3-Building-Custom-Images-Through-Docker-Server"><a href="#Section-3-Building-Custom-Images-Through-Docker-Server" class="headerlink" title="Section 3: Building Custom Images Through Docker Server"></a>Section 3: Building Custom Images Through Docker Server</h1><h2 id="How-to-build-an-Image"><a href="#How-to-build-an-Image" class="headerlink" title="How to build an Image?"></a>How to build an Image?</h2><h3 id="What-is-a-dockerfile"><a href="#What-is-a-dockerfile" class="headerlink" title="What is a dockerfile?"></a>What is a dockerfile?</h3><p><img src="https://kunren1010.github.io/post-images/docker-images/section-3/image.png"></p><p>Dockerfile is a configuration file used to define some behaviors.</p><h3 id="How-to-write-a-custom-dockerfile"><a href="#How-to-write-a-custom-dockerfile" class="headerlink" title="How to write a custom dockerfile?"></a>How to write a custom dockerfile?</h3><p><img src="https://kunren1010.github.io/post-images/docker-images/section-3/image_1.png"></p><p>This diagram shows the basic point that how to create a dockerfile.</p><p>Firstly we need a base image, and install some dependencies and softwares in our <strong>FileSystem</strong> and finally run a command to start up.</p><p>Here, we  create a redis-server Image:</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-3/image_2.png"></p><h2 id="How-does-dockerfile-work"><a href="#How-does-dockerfile-work" class="headerlink" title="How does dockerfile work?"></a>How does dockerfile work?</h2><p>When we run <strong>docker build .</strong>  we can see some logs from docker CLI.</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs Bash">➜  ~ docker build .<br>[+] Building 3.6s (7/7) FINISHED                                                <br> =&gt; [internal] load build definition from Dockerfile                       0.0s<br> =&gt; =&gt; transferring dockerfile: 102B                                       0.0s<br> =&gt; [internal] load .dockerignore                                          0.0s<br> =&gt; =&gt; transferring context: 2B                                            0.0s<br> =&gt; [internal] load metadata <span class="hljs-keyword">for</span> docker.io/library/alpine:latest           2.2s<br> =&gt; [auth] library/alpine:pull token <span class="hljs-keyword">for</span> registry-1.docker.io              0.0s<br> =&gt; [1/2] FROM docker.io/library/alpine@sha256:21a3deaa0d32a8057914f36584  0.0s<br> =&gt; =&gt; resolve docker.io/library/alpine@sha256:21a3deaa0d32a8057914f36584  0.0s<br> =&gt; =&gt; sha256:c059bfaa849c4d8e4aecaeb3a10c2d9b3d85f5165c6 1.47kB / 1.47kB  0.0s<br> =&gt; =&gt; sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc98438 1.64kB / 1.64kB  0.0s<br> =&gt; =&gt; sha256:e7d88de73db3d3fd9b2d63aa7f447a10fd0220b7cbf3980 528B / 528B  0.0s<br> =&gt; [2/2] RUN apk add --update redis                                       1.3s<br> =&gt; exporting to image                                                     0.1s<br> =&gt; =&gt; exporting layers                                                    0.1s<br> =&gt; =&gt; writing image sha256:22a152753cd2aff7e8addf5ff18af03ff3207978212b3  0.0s<br><br></code></pre></td></tr></table></figure><p><img src="https://kunren1010.github.io/post-images/docker-images/section-3/image_3.png"></p><p>Every time, docker runs a one-line command in the Dockerfile, the docker server will create a contemporary container to run that command. After that, the docker server will get the image (FileSystem Snapshot) from the last step. And then create a contemporary container and run the next command…</p><h3 id="How-to-tag-a-Image"><a href="#How-to-tag-a-Image" class="headerlink" title="How to tag a Image"></a>How to tag a Image</h3><p>We can get a name for Image. Like:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Bash">docker build -t redis .<br><br><span class="hljs-comment"># we can run the image by its name</span><br>➜  ~ docker run redis<br>1:C 09 Jan 2022 15:24:32.739 <span class="hljs-comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br>1:C 09 Jan 2022 15:24:32.740 <span class="hljs-comment"># Redis version=6.2.6, bits=64, commit=b39e1241, modified=0, pid=1, just started</span><br>1:C 09 Jan 2022 15:24:32.740 <span class="hljs-comment"># Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span><br>1:M 09 Jan 2022 15:24:32.742 * monotonic clock: POSIX clock_gettime<br>1:M 09 Jan 2022 15:24:32.743 * Running mode=standalone, port=6379.<br>1:M 09 Jan 2022 15:24:32.743 <span class="hljs-comment"># Server initialized</span><br>1:M 09 Jan 2022 15:24:32.743 * Ready to accept connections<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Section 2: Manipulating Containers with the Docker Client</title>
    <link href="/2022/01/17/section-2-manipulating-containers-with-the-docker-client/"/>
    <url>/2022/01/17/section-2-manipulating-containers-with-the-docker-client/</url>
    
    <content type="html"><![CDATA[<h1 id="Section-2-Manipulating-Containers-with-the-Docker-Client"><a href="#Section-2-Manipulating-Containers-with-the-Docker-Client" class="headerlink" title="Section 2: Manipulating Containers with the Docker Client"></a>Section 2: Manipulating Containers with the Docker Client</h1><h2 id="Run-a-container"><a href="#Run-a-container" class="headerlink" title="Run a container"></a>Run a container</h2><h3 id="How-to-create-and-run-a-container-from-an-image"><a href="#How-to-create-and-run-a-container-from-an-image" class="headerlink" title="How to create and run a container from an image?"></a>How to create and run a container from an image?</h3><p>We can use this command to create a container</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># docker run &lt;image name&gt;</span><br>docker run hello-world<br></code></pre></td></tr></table></figure><p>As I mentioned before, image consist of <em>a FileSystem Snapshot</em> and a <em>Startup Command</em>. When running <strong>docker run</strong> docker server will create a container where there is <em>the same FlieSystem Snapshot,</em> and run the <em>startup command</em>, Like this diagram:</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-2/image.png"></p><p>We can <strong>override</strong> the startup command by adding more command after <em>docker run</em>.</p><p>When I run the command that diagram shows on my own machine, we can see the output below:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># docker run image &lt;override command&gt;</span><br>➜  ~ docker run busybox <span class="hljs-built_in">ls</span><br>Unable to find image <span class="hljs-string">&#x27;busybox:latest&#x27;</span> locally<br>latest: Pulling from library/busybox<br>5cc84ad355aa: Pull complete <br>Digest: sha256:5acba83a746c7608ed544dc1533b87c737a0b0fb730301639a0179f9344b1678<br>Status: Downloaded newer image <span class="hljs-keyword">for</span> busybox:latest<br>bin<br>dev<br>etc<br>home<br>proc<br>root<br>sys<br>tmp<br>usr<br>var<br></code></pre></td></tr></table></figure><h2 id="More-useful-commands"><a href="#More-useful-commands" class="headerlink" title="More useful commands"></a>More useful commands</h2><h3 id="List-container"><a href="#List-container" class="headerlink" title="List container"></a>List container</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># list running container</span><br>➜  ~ docker ps<br>CONTAINER ID   IMAGE     COMMAND             CREATED         STATUS         PORTS     NAMES<br>5394a283723c   busybox   <span class="hljs-string">&quot;ping google.com&quot;</span>   7 seconds ago   Up 7 seconds             crazy_ramanujan<br><br><span class="hljs-comment"># list all container</span><br>➜  ~ docker ps -a<br>CONTAINER ID   IMAGE         COMMAND             CREATED          STATUS                      PORTS     NAMES<br>5394a283723c   busybox       <span class="hljs-string">&quot;ping google.com&quot;</span>   53 seconds ago   Up 52 seconds                         crazy_ramanujan<br>59e6b66bbcd5   busybox       <span class="hljs-string">&quot;ls&quot;</span>                7 minutes ago    Exited (0) 7 minutes ago              wonderful_rosalind<br>fbcf6dcb378d   hello-world   <span class="hljs-string">&quot;/hello&quot;</span>            14 minutes ago   Exited (0) 14 minutes ago             wizardly_dubinsky<br><br></code></pre></td></tr></table></figure><h3 id="Get-logs-from-a-container"><a href="#Get-logs-from-a-container" class="headerlink" title="Get logs from a container"></a>Get logs from a container</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># docker logs &lt;container id&gt;</span><br>➜  ~ docker logs 5394a283723c <br>PING google.com (142.250.74.142): 56 data bytes<br>64 bytes from 142.250.74.142: <span class="hljs-built_in">seq</span>=0 ttl=37 time=22.207 ms<br>64 bytes from 142.250.74.142: <span class="hljs-built_in">seq</span>=1 ttl=37 time=21.690 ms<br>64 bytes from 142.250.74.142: <span class="hljs-built_in">seq</span>=2 ttl=37 time=21.698 ms<br>64 bytes from 142.250.74.142: <span class="hljs-built_in">seq</span>=3 ttl=37 time=21.766 ms<br></code></pre></td></tr></table></figure><h3 id="Stop-and-kill-a-container"><a href="#Stop-and-kill-a-container" class="headerlink" title="Stop and kill a container"></a>Stop and kill a container</h3><p>Stop a container means that shut down the process by normal method. Just like closing an application, we need to wait for the process to save their contemporary data and close network establishing.</p><p>Killing a container doesn’t care anything, but just kill the process right now by force. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># docker stop &lt;container id&gt;</span><br>➜  ~ docker stop faf774b5ed5f<br><span class="hljs-comment"># wait 5 secondes if container do not close, then stop the container forcely</span><br>faf774b5ed5f<br><br><span class="hljs-comment"># docker stop &lt;container id&gt;</span><br>➜  ~ docker <span class="hljs-built_in">kill</span> e9cf53ebce4b<br><span class="hljs-comment"># kill the process intermediately</span><br>e9cf53ebce4b<br></code></pre></td></tr></table></figure><p><strong>If there is no normal method to shut down the process, docker will wait 5 seconds and stop this container by force.</strong></p><p>Here are two diagram to show how docker stop and kill a container.</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-2/image_1.png"></p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-2/image_2.png"></p><h3 id="Go-inside-of-a-container"><a href="#Go-inside-of-a-container" class="headerlink" title="Go inside of a container"></a>Go inside of a container</h3><p>We can use <strong>-it</strong> flag to go to inside of a container. The flag <strong>-i</strong> means <strong>interactive</strong> will instruct to pass the <strong>STDIN</strong> to the container. And the flag <strong>-t</strong> means <strong>tty</strong>  will create a tty which make the output format looks better.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># docker exec -it &lt;container id&gt; &lt;command&gt;</span><br><br>➜  ~ docker <span class="hljs-built_in">exec</span> -it 9c0dec78addb sh<br>/ <span class="hljs-comment"># ls</span><br>bin   dev   etc   home  proc  root  sys   tmp   usr   var<br><br>➜  ~ docker <span class="hljs-built_in">exec</span> -it 9c0dec78addb <span class="hljs-built_in">ls</span><br>bin   dev   etc   home  proc  root  sys   tmp   usr   var<br><br></code></pre></td></tr></table></figure><h4 id="By-the-way-What-is-STDIN"><a href="#By-the-way-What-is-STDIN" class="headerlink" title="By the way, What is STDIN?"></a>By the way, What is <strong>STDIN</strong>?</h4><p><img src="https://kunren1010.github.io/post-images/docker-images/section-2/image_3.png"></p><p>Every container has own STDIN, STDOUT and STDERR for standard input and output stream. And <strong>-i</strong> flag is used to allow your typing in your own windows or macos terminal can pass into the container. </p>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Section 1: Dive Into Docker</title>
    <link href="/2022/01/08/section-1-dive-into-docker/"/>
    <url>/2022/01/08/section-1-dive-into-docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Section-1-Dive-Into-Docker"><a href="#Section-1-Dive-Into-Docker" class="headerlink" title="Section 1: Dive Into Docker"></a>Section 1: Dive Into Docker</h1><p>When we start to learn some tech, The first thing is to figure out what is it and why we want to use it.</p><h2 id="What-is-docker"><a href="#What-is-docker" class="headerlink" title="What is docker?"></a>What is docker?</h2><p><img src="https://kunren1010.github.io/post-images/docker-images/section-1/image.png"></p><h2 id="Why-use-docker"><a href="#Why-use-docker" class="headerlink" title="Why use docker?"></a>Why use docker?</h2><p>In my opinion, there are two reason why we want to use it. And there are also lots of other benefits to use it. </p><h3 id="1-Easy-to-install-and-manage-any-environment-and-software"><a href="#1-Easy-to-install-and-manage-any-environment-and-software" class="headerlink" title="1. Easy to install and manage any environment and software"></a>1. Easy to install and manage any environment and software</h3><p>The traditional setup of a software is like this:</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-1/image_1.png"></p><p>So it is really complex to install a software especially for example, when there is python 3 on our machine, and we also want to install python 2. It is a little difficult to achieve that.</p><p>But docker has a strong ecosystem that provide lots of <strong>Images</strong> which can be installed in different isolated  C<strong>ontainer</strong>s, and we can use those images to build any software and dependencies.</p><h3 id="2-Provide-a-simple-and-clean-virtual-environment"><a href="#2-Provide-a-simple-and-clean-virtual-environment" class="headerlink" title="2. Provide a simple and clean virtual environment"></a>2. Provide a simple and clean virtual environment</h3><p><img src="https://kunren1010.github.io/post-images/docker-images/section-1/docker-explained-3.png"></p><p>As we can see, when we run an application on a virtual machine like VMware or Virtualbox. We also need to install a basic operating system on that virtual machine. It cost a lot of resource like CPU, memory. But In the docker ecosystem we that just run that application with a small and basic image to cut down that extra cost.</p><h2 id="What-is-Image-and-Container"><a href="#What-is-Image-and-Container" class="headerlink" title="What is Image and Container?"></a>What is Image and Container?</h2><p><img src="https://kunren1010.github.io/post-images/docker-images/section-1/image_2.png"></p><p>Image is a single file that remain some configs to establish a container in a virtual environment. So we can say “Container is a running instance of an image”.</p><p>As I mentioned, it is difficult to use both python 2 and python 3 at the same time. Here is the problem.</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-1/image_3.png"></p><p>Chrome needs Python v2 but NodeJs needs Python v3. </p><p>We can use <strong>Namespacing</strong> and <strong>Control Groups</strong> functions of Linux to distinguish these two versions like this:</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-1/image_4.png"></p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-1/image_5.png"></p><p><strong>Image</strong> is actually a FileSystem Snapshot with a startup command. And <strong>container</strong> is a running process which is provided some RAM, CPU and Network resources. </p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-1/image_6.png"></p><p>And docker is running in a virtual machine which contain a Linux Kernel. Which at the top of physic machine.</p><p><img src="https://kunren1010.github.io/post-images/docker-images/section-1/image_7.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker Notes</title>
    <link href="/2021/12/01/docker-notes/"/>
    <url>/2021/12/01/docker-notes/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>Just some Notes of docker</p><h3 id="Docker-flags"><a href="#Docker-flags" class="headerlink" title="Docker flags"></a>Docker flags</h3><h4 id="1-t-tty"><a href="#1-t-tty" class="headerlink" title="1. -t (tty)"></a>1. -t (tty)</h4><p>will create a tty where you can interact with the container.</p><h4 id="2-i-interactive"><a href="#2-i-interactive" class="headerlink" title="2. -i (interactive)"></a>2. -i (interactive)</h4><p>will instruct to pass the STDIN to the container. </p><h4 id="3-d-detached"><a href="#3-d-detached" class="headerlink" title="3. -d (detached)"></a>3. -d (detached)</h4><p>the container will run in the background.</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">docker run -d -it --name looper ubuntu<br></code></pre></td></tr></table></figure><p><strong>docker run -d</strong> run container detached, <strong>-it</strong> allows you to interact with the container by using the command line.<strong>–name looper</strong> set a name to the container instead of a random name.</p><h3 id="4-f"><a href="#4-f" class="headerlink" title="4. -f"></a>4. -f</h3><p>we can see the logs with the command below</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker logs -f looper<br></code></pre></td></tr></table></figure><p>you can also see the logs with “attach”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker attach loopper<br></code></pre></td></tr></table></figure><p>if you press control+c in the attached terminal, the container is stopped. So it’s better to use <strong>–no–stdin</strong> flag for safity.</p><h3 id="Docker-command"><a href="#Docker-command" class="headerlink" title="Docker command"></a>Docker command</h3><h4 id="1-exec"><a href="#1-exec" class="headerlink" title="1. exec"></a>1. exec</h4><p>If you want to create a new terminal in the container, you can run </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it looper bash<br></code></pre></td></tr></table></figure><h4 id="2-kill"><a href="#2-kill" class="headerlink" title="2. kill"></a>2. kill</h4><p>You can also kill the process like below:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker kill looper<br></code></pre></td></tr></table></figure><h4 id="3-rm"><a href="#3-rm" class="headerlink" title="3. rm"></a>3. rm</h4><p>You can remove the container </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm looper<br></code></pre></td></tr></table></figure><h4 id="4-search"><a href="#4-search" class="headerlink" title="4. search"></a>4. search</h4><p>You can search images from the Docker Hub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search nginx<br></code></pre></td></tr></table></figure><h4 id="5-tag"><a href="#5-tag" class="headerlink" title="5. tag"></a>5. tag</h4><p>You can rename your image like:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker tag ubuntu:18.04 ubuntu:bionic<br></code></pre></td></tr></table></figure><h4 id="6-cp"><a href="#6-cp" class="headerlink" title="6. cp"></a>6. cp</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker cp /additional.txt zen_rosalind:/usr/src/app/<br></code></pre></td></tr></table></figure><h3 id="Bind-mount"><a href="#Bind-mount" class="headerlink" title="Bind mount"></a>Bind mount</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -v &quot;$(pwd):/mydir&quot; youtube-dl https://imgur.com/JY5tHqr<br></code></pre></td></tr></table></figure><h3 id="Port-open"><a href="#Port-open" class="headerlink" title="Port open"></a>Port open</h3><blockquote><p>To expose a port, add line EXPOSE <port> in your Dockerfile.<br>To publish a port, run the container with -p <host-port>:<container-port></p></blockquote><h3 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h3><p>An image name may consist of 3 parts plus a tag.<br>Usually like the following: <strong>registry&#x2F;organisation&#x2F;image:tag</strong></p><p><strong>clean docker commandline</strong></p><blockquote><p>docker container prune<br>docker system prune</p></blockquote><h3 id="ENTRYPOINT-VS-CMD"><a href="#ENTRYPOINT-VS-CMD" class="headerlink" title="ENTRYPOINT VS CMD"></a>ENTRYPOINT VS CMD</h3><p>What is the difference between <strong>ENTRYPOINT</strong> and <strong>CMD</strong>?<br><strong>ENTRYPOINT</strong> is entry of the program, or just like a fuction.<br><strong>CMD</strong> is just like default parameter of <strong>ENTRYPOINT</strong> (fuction). And we can easily override it by adding an argument of docker run command.  </p><h3 id="Shell-form-and-exec-form"><a href="#Shell-form-and-exec-form" class="headerlink" title="Shell form and exec form"></a>Shell form and exec form</h3><p>The main difference of those two is the bracket[] and quote “”.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">Shell form: &lt;instruction&gt; &lt;command&gt;<br>Exec form: &lt;instruction&gt; [&quot;executable&quot;, &quot;parameter&quot;]<br></code></pre></td></tr></table></figure><p>The better way is only use exec form, because shell form will cause some unknown problem sometimes.</p><h2 id="Depoly-image"><a href="#Depoly-image" class="headerlink" title="Depoly image"></a>Depoly image</h2><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h3 id="Bind-a-volume"><a href="#Bind-a-volume" class="headerlink" title="Bind a volume"></a>Bind a volume</h3><p>Volumes in docker-compose are defined with the following syntax <strong>location-in-host:location-in-container</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">nginx:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:alpine</span><br>  <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./nginx.conf:/etc/nginx/nginx.conf:ro</span><br>  <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">80</span><span class="hljs-string">:80</span><br>  <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">frontend</span><br>  <span class="hljs-attr">container_name:</span> <span class="hljs-string">nginx</span><br></code></pre></td></tr></table></figure><h3 id="Environment-variables"><a href="#Environment-variables" class="headerlink" title="Environment variables"></a>Environment variables</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.5&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">backend:</span><br>      <span class="hljs-attr">image:</span>  <br>      <span class="hljs-attr">environment:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">VARIABLE=VALUE</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">VARIABLE</span> <br></code></pre></td></tr></table></figure><p>The version number is no less than 2, because otherwise the syntax is significantly different</p><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><p>A major benefit of defining network is that it makes it easy to setup a configuration where other containers connect to an existing network as an external network. </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.8&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres:13.2-alpine</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">database-network</span> <span class="hljs-comment"># Name in this docker-compose file</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">database-network:</span> <span class="hljs-comment"># Name in this docker-compose file</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">database-network</span> <span class="hljs-comment"># Name that will be the actual name of the network</span><br></code></pre></td></tr></table></figure><p>To connect to an external network (possibly defined another docker-compose.yml):</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.8&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">backend-image</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">database-network</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">database-network:</span><br>    <span class="hljs-attr">external:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">database-network</span> <span class="hljs-comment"># Must match the actual name of the network</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Common SQL syntax</title>
    <link href="/2021/11/01/common-sql-syntax/"/>
    <url>/2021/11/01/common-sql-syntax/</url>
    
    <content type="html"><![CDATA[<h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><p>Select fleids and show the rows of table</p><figure class="highlight sql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> CustomerName, City <span class="hljs-keyword">FROM</span> Customers;<br></code></pre></td></tr></table></figure><h3 id="Select-Distinct"><a href="#Select-Distinct" class="headerlink" title="Select Distinct"></a>Select Distinct</h3><p>Select fleids and show the different value of the fleids</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> Country <span class="hljs-keyword">FROM</span> Customers;<br></code></pre></td></tr></table></figure><h3 id="Where-Clause"><a href="#Where-Clause" class="headerlink" title="Where Clause"></a>Where Clause</h3><p>Where Clause is used to filter records</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">WHERE</span> Price <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">50</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">60</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> City <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;Paris&#x27;</span>,<span class="hljs-string">&#x27;London&#x27;</span>);<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> City <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;s%&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">WHERE</span> Price <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br></code></pre></td></tr></table></figure><h3 id="And-Or-Not"><a href="#And-Or-Not" class="headerlink" title="And, Or, Not"></a>And, Or, Not</h3><p>The WHERE clause can be combined with AND, OR, and NOT operators.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> City <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Berlin&#x27;</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> Country<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Germany&#x27;</span> <span class="hljs-keyword">AND</span> (City<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Berlin&#x27;</span> <span class="hljs-keyword">OR</span> City<span class="hljs-operator">=</span><span class="hljs-string">&#x27;München&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="Order-By"><a href="#Order-By" class="headerlink" title="Order By"></a>Order By</h3><p>The following SQL statement selects all customers from the “Customers” table, sorted <strong>ascending</strong> by the “Country” and <strong>descending</strong> by the “CustomerName” column:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Country <span class="hljs-keyword">ASC</span>, CustomerName <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h3 id="Insert-Into"><a href="#Insert-Into" class="headerlink" title="Insert Into"></a>Insert Into</h3><p>Insert new records in a table</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Customers (CustomerName, ContactName, Address, City, PostalCode, Country)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;Cardinal&#x27;</span>, <span class="hljs-string">&#x27;Tom B. Erichsen&#x27;</span>, <span class="hljs-string">&#x27;Skagen 21&#x27;</span>, <span class="hljs-string">&#x27;Stavanger&#x27;</span>, <span class="hljs-string">&#x27;4006&#x27;</span>, <span class="hljs-string">&#x27;Norway&#x27;</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name<br><span class="hljs-keyword">VALUES</span> (value1, value2, value3, ...);<br></code></pre></td></tr></table></figure><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> Customers<br><span class="hljs-keyword">SET</span> ContactName <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Alfred Schmidt&#x27;</span>, City<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Frankfurt&#x27;</span><br><span class="hljs-keyword">WHERE</span> CustomerID <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacOS Experience</title>
    <link href="/2021/10/20/macos-ti-yan/"/>
    <url>/2021/10/20/macos-ti-yan/</url>
    
    <content type="html"><![CDATA[<p>关闭更新红点：</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs c">defaults write com.apple.systempreferences AttentionPrefBundleIDs <span class="hljs-number">0</span><br>killall Dock<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode Notebook</title>
    <link href="/2021/10/14/leetcode-notebook/"/>
    <url>/2021/10/14/leetcode-notebook/</url>
    
    <content type="html"><![CDATA[<p>Today is a nice day!</p><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>二分查找易错点：<strong>写二分法经常写乱，主要是因为对区间的定义没有想清楚，区间的定义就是不变量</strong>。<br>在[A, B]的情况下代码应该这样写：</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; <span class="hljs-comment">// 定义target在左闭右闭的区间里，[left, right]</span><br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123; <span class="hljs-comment">// 当left==right，区间[left, right]依然有效，所以用 &lt;=</span><br>            <span class="hljs-type">int</span> middle = left + ((right - left) / <span class="hljs-number">2</span>);<span class="hljs-comment">// 防止溢出 等同于(left + right)/2</span><br>            <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>                right = middle - <span class="hljs-number">1</span>; <span class="hljs-comment">// target 在左区间，所以[left, middle - 1]</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>                left = middle + <span class="hljs-number">1</span>; <span class="hljs-comment">// target 在右区间，所以[middle + 1, right]</span><br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// nums[middle] == target</span><br>                <span class="hljs-keyword">return</span> middle; <span class="hljs-comment">// 数组中找到目标值，直接返回下标</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 未找到目标值</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在[A, B)的情况下，代码应该这样写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right = nums.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">// 定义target在左闭右开的区间里，即：[left, right)</span><br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123; <span class="hljs-comment">// 因为left == right的时候，在[left, right)是无效的空间，所以使用 &lt;</span><br>            <span class="hljs-type">int</span> middle = left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>                right = middle; <span class="hljs-comment">// target 在左区间，在[left, middle)中</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>                left = middle + <span class="hljs-number">1</span>; <span class="hljs-comment">// target 在右区间，在[middle + 1, right)中</span><br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// nums[middle] == target</span><br>                <span class="hljs-keyword">return</span> middle; <span class="hljs-comment">// 数组中找到目标值，直接返回下标</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 未找到目标值</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>其中重点在于右边界值到底是否存在：</strong><br>如果右边界值存在，也就是区间为[A, B]，那么while里面可以写成left &lt;&#x3D; right，在 left &#x3D;&#x3D; right的情况下还能判断一次，nums[mid]的值是否存在。在left和right取值时需要将mid排除出去。<br>如果右边界值不存在，也就是区间为[A, B), 那么while里面只能写成left &lt; right，因为right取不到所以并不成立。相应的nums[mid]只有在left移动时才能使用mid+1将mid排除，因为区间为<strong>前闭后开</strong>right在移动至mid时已经将mid排除了。</p><h3 id="双指针和快慢指针"><a href="#双指针和快慢指针" class="headerlink" title="双指针和快慢指针"></a>双指针和快慢指针</h3><p>其实差距不大，其实就是两个指针比较然后移动。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Idea - make life easier</title>
    <link href="/2021/09/20/idea-make-life-easier/"/>
    <url>/2021/09/20/idea-make-life-easier/</url>
    
    <content type="html"><![CDATA[<ol><li>Develop a software to generate different sizes of one picture.</li><li>Develop a website to select systemOS and flash it online.</li><li>Layser Assitant</li><li>bike charging</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Diary in Finland</title>
    <link href="/2021/09/09/finland-experience/"/>
    <url>/2021/09/09/finland-experience/</url>
    
    <content type="html"><![CDATA[<h3 id="2021-9-19"><a href="#2021-9-19" class="headerlink" title="2021-9-19"></a>2021-9-19</h3><p>Hello! over the past two days, I didn’t want to see anything about my studies, I AM SO TIRED. maybe I am not tried, just don’t know where I should go, I want to be a designer and computer engineer, but I am not sure how to achieve my goal. I suddenly realize that I am not good at studying by myself, and my mind is a little bit exhausted. Although I have done something unrelated studies, like inited my computer and changed my computer system from Windows to Ubuntu for a quiet working environment.So just start from here again.</p><h3 id="2021-10-4"><a href="#2021-10-4" class="headerlink" title="2021-10-4"></a>2021-10-4</h3><p>8 hours studying, 2 hours eating, 8-9 hours sleeping, other time(particularly night) belongs to myself.</p><h3 id="2021-10-7"><a href="#2021-10-7" class="headerlink" title="2021-10-7"></a>2021-10-7</h3><p>Today, when we went dormitory after cycling, we seen the Rovio which was famous for Anger birds, and Since I opened Bilibili, I seen the zhihuijun’s powerful and coool video about a robotic shouder, I don’t how and when I can be a proper programmer and designer.</p><h3 id="2021-10-20"><a href="#2021-10-20" class="headerlink" title="2021-10-20"></a>2021-10-20</h3><p>hello! today it’s my first day to chat with a finland people. yeah! he is my current tenant of my apartment. the thing is that we need to buy some furniture from him directly. and he give us an amazing cheap price. here are our screenshot of telegram. </p>]]></content>
    
    
    
    <tags>
      
      <tag>Daily</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>First dream - 最初的梦想（赠ZZK同学）</title>
    <link href="/2021/09/04/zui-chu-de-meng-xiang-fang-zzk-tong-xue/"/>
    <url>/2021/09/04/zui-chu-de-meng-xiang-fang-zzk-tong-xue/</url>
    
    <content type="html"><![CDATA[<p>我最初的梦想是改变世界 。<br>上高中的时候，被《石头门》所感染，想着成为一名程序员兼设计师，希望有朝一日能够创造出能够改变人们生活的作品。<br>然后上大学了，因为各种原因，一开始选择了机械，但我并不开心（有点抑郁）。<br>有一天突然想要去一个没人认识我的地方，重新开始。<br>后来我想要追求自己的兴趣，转专业到计算机，过上了边努力边悠闲的小日子。<br>但我发现计算机很多时候是枯燥无味的。<br>于是便陷入了迷茫。<br>现在我成为了外乡人，改变世界太难，我想先认识世界，真诚待人，包容万物。<br>我从来都是个混子，但是我想为这个世界献出一点点微小的贡献。</p><h2 id="First-dream"><a href="#First-dream" class="headerlink" title="First dream"></a>First dream</h2><p>My first dream is to change the world.<br>In high school, Infected by  “Steins; Gate”, I wanted to be a programmer and designer, hoping one day I could create something that could change people’s life.<br>Then at college, because of several reasons, I chose mechanical as my major, But I was unhappy(or depressed).<br>One day, I suddenly want to go to a place where no one knows me and restarted.<br>Then I wanted to escape my interest, changed my major to computer, and began my hard-working and leisure time.<br>But I find it is boring most of the time.<br>Thus I get lost.<br>Now I have become an outlander, it is so difficult to change the world, I think I should get to know this world first, be sincere to people, inclusive of all.<br>I am not a hard-working man at all, but I want to make a small contribution to this world.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
